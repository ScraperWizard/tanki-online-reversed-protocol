class CL_logGpuReport {
    constructor() {
        this.spaceId = 100119080
        this.methodId = 3374349494609106254n
    }

    serialize() {
        const parameters = {
            spaceId: this.spaceId,
            methodId: this.methodId,
            callbackId: this.callbackId,
        };
        const keys = Object.keys(parameters);
        const values = Object.values(parameters);
        const buffer_length = 2264 + 2
        const buffer = new ArrayBuffer(buffer_length);
        const view = new DataView(buffer);
        let pos = 0;

        view.setUint16(pos, 2264); // Write the packet size
        pos += 2; // Shift position by 2 bytes since the packet size is a short
        view.setUint8(pos, 0); // Nullmap byte
        pos += 5;
        view.setUint32(pos, values[0]) // Space ID
        pos += 4;
        view.setBigInt64(pos, values[1]); // Method ID
        pos += 8;
        view.setUint8(pos, 1);
        const hexString = "88c57b22677075223a7b22657874656e73696f6e73223a5b224558545f636f6c6f725f6275666665725f666c6f6174222c224558545f636f6c6f725f6275666665725f68616c665f666c6f6174222c224558545f6469736a6f696e745f74696d65725f71756572795f776562676c32222c224558545f666c6f61745f626c656e64222c224558545f746578747572655f636f6d7072657373696f6e5f72677463222c224558545f746578747572655f66696c7465725f616e69736f74726f706963222c224558545f746578747572655f6e6f726d3136222c224b48525f706172616c6c656c5f7368616465725f636f6d70696c65222c224f45535f647261775f627566666572735f696e6465786564222c224f45535f746578747572655f666c6f61745f6c696e656172222c22574542474c5f636f6d707265737365645f746578747572655f73337463222c22574542474c5f636f6d707265737365645f746578747572655f733374635f73726762222c22574542474c5f64656275675f72656e64657265725f696e666f222c22574542474c5f64656275675f73686164657273222c22574542474c5f6c6f73655f636f6e74657874222c22574542474c5f6d756c74695f64726177222c22574542474c5f70726f766f6b696e675f766572746578225d2c22676c56657273696f6e223a22576562474c20322e3020284f70656e474c20455320332e30204368726f6d69756d29222c2273686164696e674c616e677561676556657273696f6e223a22576562474c20474c534c20455320332e303020284f70656e474c20455320474c534c20455320332e30204368726f6d69756d29222c2276656e646f72223a225765624b6974222c2272656e6465726572223a225765624b697420576562474c222c22756e4d61736b6564496e666f223a7b2272656e6465726572223a22414e474c4520284170706c652c204170706c65204d312c204f70656e474c20342e3129222c2276656e646f72223a22476f6f676c6520496e632e20284170706c6529227d2c22616e7469616c696173223a747275652c226d6178436f6c6f7242756666657273223a312c2272656442697473223a382c22677265656e42697473223a382c22626c756542697473223a382c22616c70686142697473223a382c22646570746842697473223a32342c227374656e63696c42697473223a302c226d617852656e64657242756666657253697a65223a31363338342c226d6178436f6d62696e656454657874757265496d616765556e697473223a33322c226d6178437562654d61705465787475726553697a65223a31363338342c226d6178467261676d656e74556e69666f726d566563746f7273223a313032342c226d617854657874757265496d616765556e697473223a31362c226d61785465787475726553697a65223a31363338342c226d617856617279696e67566563746f7273223a33312c226d617856657274657841747472696275746573223a31362c226d617856657274657854657874757265496d616765556e697473223a31362c226d6178566572746578556e69666f726d566563746f7273223a313032342c22616c69617365644c696e65576964746852616e6765223a5b312c315d2c22616c6961736564506f696e7453697a6552616e6765223a5b312c36345d2c226d617856696577706f727444696d656e73696f6e73223a5b31363338342c31363338345d2c226d6178416e69736f74726f7079223a31362c226d6178566572746578556e69666f726d436f6d706f6e656e7473223a343039362c226d6178566572746578556e69666f726d426c6f636b73223a31362c226d61785665727465784f7574707574436f6d706f6e656e7473223a36342c226d617856617279696e67436f6d706f6e656e7473223a3132342c226d6178467261676d656e74556e69666f726d436f6d706f6e656e7473223a343039362c226d6178467261676d656e74556e69666f726d426c6f636b73223a31362c226d6178467261676d656e74496e707574436f6d706f6e656e7473223a3132382c226d696e50726f6772616d546578656c4f6666736574223a2d382c226d617850726f6772616d546578656c4f6666736574223a372c226d61784472617742756666657273223a382c226d6178436f6c6f724174746163686d656e7473223a382c226d617853616d706c6573223a342c226d617833645465787475726553697a65223a323034382c226d61784172726179546578747572654c6179657273223a323034382c226d6178546578747572654c6f6442696173223a31362c226d6178556e69666f726d42756666657242696e64696e6773223a37322c226d6178556e69666f726d426c6f636b53697a65223a36353533362c22756e69666f726d4275666665724f6666736574416c69676e6d656e74223a3235362c226d6178436f6d62696e6564556e69666f726d426c6f636b73223a33322c226d6178436f6d62696e6564566572746578556e69666f726d436f6d706f6e656e7473223a3236363234302c226d6178436f6d62696e6564467261676d656e74556e69666f726d436f6d706f6e656e7473223a3236363234302c226d61785472616e73666f726d466565646261636b496e7465726c6561766564436f6d706f6e656e7473223a36342c226d61785472616e73666f726d466565646261636b536570617261746541747472696273223a342c226d61785472616e73666f726d466565646261636b5365706172617465436f6d706f6e656e7473223a342c226d6178456c656d656e74496e646578223a343239343936373239352c226d61785365727665725761697454696d656f7574223a307d2c226d617868656170223a323137323634393437322c22757365724167656e74223a224d6f7a696c6c612f352e3020284d6163696e746f73683b20496e74656c204d6163204f5320582031305f31355f3729204170706c655765624b69742f3533372e333620284b48544d4c2c206c696b65204765636b6f29204368726f6d652f3131342e302e302e30205361666172692f3533372e3336222c227761736d223a747275657d";
        const hexBytes = hexString.match(/.{1,2}/g).map(byte => parseInt(byte, 16));

        const originalBufferSize = buffer.byteLength;
        const requiredBufferSize = originalBufferSize + hexBytes.length;

        // Create a new buffer with the required size
        const newBuffer = new ArrayBuffer(requiredBufferSize);

        // Copy the existing buffer contents into the new buffer
        const originalView = new Uint8Array(buffer);
        const newView = new Uint8Array(newBuffer);
        newView.set(originalView);

        // Use the new buffer for further operations

        // Set the hex values in the new buffer
        for (const byte of hexBytes) {
            view.setUint8(pos, byte);
            pos++;
        }


        return buffer;
    }
}

export default CL_logGpuReport;